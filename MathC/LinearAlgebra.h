#pragma once
#include "Matrix.h"

namespace linalg
{

	// LU-разложение матрицы (A = L * U).
	// true, если расчёт прошёл без ошибок.
	bool LU(
		const Matrix& A,				// исходная матрица
		Matrix& L,						// нижне-треугольная матрица
		Matrix& U);						// верхне-треугольная матрица

	// PLU-разложение матрицы (P * A = L * U).
	// Исходная матрица должна быть не вырожденной.
	// true, если расчёт прошёл без ошибок.
	bool PLU(
		const Matrix& A,				// исходная матрица
		Matrix& L,						// нижне-треугольная матрица
		Matrix& U,						// верхне-треугольная матрица
		Vector& P,						// вектор индексов столбцов исх. матрицы
		size_t& k);						// количество перестановок

	// QR-разложение матрицы (A = Q * R).
	// Исходная матрица квадратная.
	// true, если расчёт прошёл без ошибок.
	bool QR(
		const Matrix& A,				// исходная матрица
		Matrix& Q,						// ортогональная матрица
		Matrix& R);						// верхне-треугольная

	// Диагонализация матрицы методом Монтанте.
	// Исходная матрица изменяется.
	// Результатом является матрица, на диагонали которой определители исходной.
	// Правые столбцы расширенной прямоугольной матрицы также изменяются,
	// что даёт возможность решать СЛАУ.
	// true, если расчёт прошёл без ошибок.
	bool MontanteBareiss(const Matrix& A);				// исходная матрица

	// расчёт определителя матрицы
	const double Determinant(const Matrix& A);			// исходная матрица

	// Расчёт обратной матрицы методом Гаусса-Жордана.
	// Исходная матрица должна быть квадратной.
	// false, если матрица вырожденная.
	bool Inverse(
		const Matrix& A,								// исходная матрица
		Matrix& I);										// обратная матрица

	// Умножение матрицы на диагональную справа.
	// Более быстрое перемножение по сравнению с общим случаем.
	Matrix AxD(
		const Matrix& A,								// исходная матрица
		const Matrix& D);								// квадратная диагональная матрица

	// Умножпение матрицы на диагональную слева.
	// Более быстрое перемножение по сравнению с общим случаем.
	Matrix DxA(
		const Matrix& D,								// квадратная диагональная матрица
		const Matrix& A);								// исходная матрица

	// Нахождение максимального по модулю собственного значения.
	// Исходная матрица квадратная.
	// true, если расчёт прошёл без ошибок.
	bool EigenValues(
		const Matrix& A,								// исходная матрица
		Vector& values);								// вектор из собственных значений

	// Сингулярное разложение матрицы A = U * S * V.
	// true, если расчёт прошёл без ошибок.
	bool SVD(
		const Matrix& A,								// исходная матрица
		Matrix& U,										// ортонормальная по столбцам матрица
		Matrix& S,										// диагональная матрица из сингулярных значений
		Matrix& V);										// ортонормальная по столбцам матрица

	// Решение СЛАУ A * X = B.
	// true, если расчёт прошёл без ошибок.
	bool Solve(
		const Matrix& A,								// матрица системы
		const Vector& B,								// вектор правой части
		Vector& X);										// вектор корней СЛАУ
}
